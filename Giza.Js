var Campaign={"operationName":"Campaign","variables":{"campaignId":"6a8e7930-a1fa-4167-bee6-54fba4fbdafd"},"query":"fragment ActivityFields on CampaignActivity {\n  id\n  createdAt\n  updatedAt\n  startDateTimeAt\n  endDateTimeAt\n  title\n  description\n  coverAssetUrl\n  type\n  identityType\n  recurringPeriod {\n    count\n    type\n    __typename\n  }\n  recurringMaxCount\n  properties\n  records {\n    id\n    status\n    createdAt\n    activityId\n    properties\n    rewardRecords {\n      id\n      status\n      appliedRewardType\n      appliedRewardQuantity\n      appliedRewardMetadata\n      error\n      rewardId\n      reward {\n        id\n        quantity\n        type\n        properties\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  tags {\n    id\n    name\n    __typename\n  }\n  reward {\n    id\n    title\n    description\n    quantity\n    type\n    imageUrl\n    properties\n    __typename\n  }\n  targetReward {\n    id\n    activityId\n    missionId\n    __typename\n  }\n  nft {\n    id\n    tokenId\n    name\n    description\n    image\n    properties\n    mintPrice\n    platformFee\n    maxSupply\n    maxMintCountPerAddress\n    nftContract {\n      id\n      address\n      type\n      chainId\n      __typename\n    }\n    __typename\n  }\n  isHidden\n  __typename\n}\n\nfragment MissionFields on CampaignMission {\n  id\n  createdAt\n  updatedAt\n  startDateTimeAt\n  endDateTimeAt\n  title\n  description\n  coverPhotoUrl\n  recurringPeriod {\n    count\n    type\n    __typename\n  }\n  recurringMaxCount\n  properties\n  tags {\n    id\n    name\n    __typename\n  }\n  rewards {\n    id\n    title\n    description\n    quantity\n    type\n    imageUrl\n    properties\n    awardMechanism\n    __typename\n  }\n  records {\n    id\n    status\n    createdAt\n    missionId\n    rewardRecords {\n      id\n      status\n      appliedRewardType\n      appliedRewardQuantity\n      appliedRewardMetadata\n      error\n      rewardId\n      reward {\n        id\n        quantity\n        type\n        properties\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  activities {\n    id\n    __typename\n  }\n  isHidden\n  __typename\n}\n\nfragment CampaignCommunityGoalFields on CampaignCommunityGoal {\n  id\n  title\n  description\n  additionalDetails\n  imageUrl\n  threshold\n  status\n  startDateTimeAt\n  endDateTimeAt\n  createdAt\n  updatedAt\n  isThresholdHidden\n  isHidden\n  ctaButtonCopy\n  ctaButtonUrl\n  __typename\n}\n\nquery Campaign($campaignId: String!) {\n  campaign(id: $campaignId) {\n    id\n    standaloneActivities {\n      id\n      isHidden\n      __typename\n    }\n    communityGoals {\n      ...CampaignCommunityGoalFields\n      campaign {\n        id\n        __typename\n      }\n      activity {\n        ...ActivityFields\n        __typename\n      }\n      __typename\n    }\n    activities {\n      ...ActivityFields\n      __typename\n    }\n    missions {\n      ...MissionFields\n      __typename\n    }\n    __typename\n  }\n}"};var Url='https://api.deform.cc/'
function GetCookie(){return window.localStorage['privy:token'];}
async function GetAccountKey(){const tc=GetCookie();const data={"operationName":"UserLogin","variables":{"data":{"externalAuthToken":tc}},"query":"mutation UserLogin($data: UserLoginInput!) {\n  userLogin(data: $data)\n}"};const response=await fetch(Url,{method:'POST',headers:{'content-type':'application/json'},body:JSON.stringify(data)})
if(!response.ok){var ss=await response.text()
return ss}
var ss=await response.text()
return ss};async function GetAccountTask(key){const data=Campaign;const response=await fetch(Url,{method:'POST',headers:{'content-type':'application/json','Authorization':'Bearer '+key},body:JSON.stringify(data)})
if(!response.ok){return await response.text()}
return await response.text()};async function POSTAccountTask(key,id){const data={"operationName":"VerifyActivity","variables":{"data":{"activityId":id}},"query":"mutation VerifyActivity($data: VerifyActivityInput!) {\n  verifyActivity(data: $data) {\n    record {\n      id\n      activityId\n      status\n      properties\n      createdAt\n      rewardRecords {\n        id\n        status\n        appliedRewardType\n        appliedRewardQuantity\n        appliedRewardMetadata\n        error\n        rewardId\n        reward {\n          id\n          quantity\n          type\n          properties\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    missionRecord {\n      id\n      missionId\n      status\n      createdAt\n      rewardRecords {\n        id\n        status\n        appliedRewardType\n        appliedRewardQuantity\n        appliedRewardMetadata\n        error\n        rewardId\n        reward {\n          id\n          quantity\n          type\n          properties\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"};const response=await fetch(Url,{method:'POST',headers:{'content-type':'application/json','Authorization':'Bearer '+key},body:JSON.stringify(data)})
if(!response.ok){return await response.text()}
return await response.text()};
